import 'package:mocktail/mocktail.dart';
import 'package:txfb_insurance_flutter/domain/clients/policy_lookup_client.dart';
import 'package:txfb_insurance_flutter/domain/models/models.dart';
import 'package:txfb_insurance_flutter/domain/models/policy/mortgagee.dart';

class MockPolicyLookupClient extends Mock implements TfbPolicyLookupClient {}

abstract class MockPolicy {
  static PolicySummary createPolicySummary({
    PolicyType policyType = PolicyType.homeowners,
    String policyNumber = '1234567890',
    String billingStatus = 'BAC-9',
    String policyMinimumAmountDue = '',
    PolicyStatus policyStatus = PolicyStatus.active,
    RecurringFlag policyRecurringFlag = RecurringFlag.enrolled,
  }) =>
      PolicySummary(
        policyNumber: policyNumber,
        memberNumber: '',
        policyType: policyType,
        policySubType: '',
        policySymbol: '',
        policyDescription: '',
        policyStatus: policyStatus.value,
        billingStatus: billingStatus,
        billAccountNumber: '',
        contractNumber: '',
        masterAccountNumber: '',
        policyEffectiveDate: '',
        policyExpirationDate: '2025-06-30',
        policyMinimumAmountDue: policyMinimumAmountDue,
        policyMaximumAmountDue: '',
        policyPastDueAmount: '',
        policyNSFAmount: '',
        policyDueDate: '2023-12-31',
        policyInsuredName: '',
        paymentRestriction: '',
        policyHolderUrl: '',
        policyIDCardFlag: '',
        roadsideAssistanceCardFlag: '',
        policyRecurringFlag: policyRecurringFlag,
        policyRecurringStatus: RecurringStatus.active,
        policyLinkFlag: '',
        policyPayableFlag: '',
        policyPremiumFinanceFlag: '',
        eBillFlag: '',
        paperlessFlag: '',
        laurusFlag: 'Y',
        accountBillEligibleFlag: '',
        agentCode: '',
      );

  static PolicySummary makeAPaymentPolicy() => PolicySummary(
        policyNumber: '1234',
        memberNumber: '',
        policyType: PolicyType.txPersonalAuto,
        policySubType: '',
        policySymbol: '',
        policyDescription: '',
        policyStatus: PolicyStatus.active.value,
        billingStatus: 'BAC-9',
        billAccountNumber: '',
        contractNumber: '',
        masterAccountNumber: '',
        policyEffectiveDate: '',
        policyExpirationDate: '2025-06-30',
        policyMinimumAmountDue: '10.0',
        policyMaximumAmountDue: '',
        policyPastDueAmount: '',
        policyNSFAmount: '',
        policyDueDate: '2023-12-31',
        policyInsuredName: '',
        paymentRestriction: '',
        policyHolderUrl: '',
        policyIDCardFlag: '',
        roadsideAssistanceCardFlag: '',
        policyRecurringFlag: RecurringFlag.notEnrolled,
        policyRecurringStatus: RecurringStatus.notEnrolled,
        policyLinkFlag: '',
        policyPayableFlag: 'Y',
        policyPremiumFinanceFlag: '',
        eBillFlag: '',
        paperlessFlag: '',
        laurusFlag: 'Y',
        accountBillEligibleFlag: '',
        agentCode: '',
      );

  static HomeownerPolicyDetail createHomeownerPolicyDetail({
    String policyNum = 'policyNum',
    String propertyLocation = 'propertyLocation',
  }) =>
      HomeownerPolicyDetail(
        propertyLocation,
        'propertyConstruction',
        'policyForm',
        [
          HomeownerSection(
            'Section I and II',
            [
              HomeownerCoverage(
                'COV_DWELLING',
                'Coverage A',
                '582000',
                'Dwelling',
                '1',
                'DWL',
                '',
              ),
              HomeownerCoverage(
                'COV_OTHERSTRUCTURES',
                'Coverage A',
                '58200',
                'Other Structures',
                '1',
                'DWL',
                '',
              ),
              HomeownerCoverage(
                'COV_PERSONALPROPERTY',
                'Coverage B',
                '349200',
                'Personal Property',
                '1',
                'DWL',
                '',
              ),
              HomeownerCoverage(
                'COV_PERSONALPROPERTY_OFFPREMISES',
                'Coverage B',
                '34920',
                'Personal Property Off Premises',
                '1',
                'DWL',
                '',
              ),
              HomeownerCoverage(
                'COV_PERSONALLIABILITY',
                'Coverage C',
                '500000',
                'Personal Liability (Each Occurrence)',
                '1',
                'POL',
                '',
              ),
              HomeownerCoverage(
                'COV_MEDICALPAYMENTS',
                'Coverage D',
                '5000',
                'Medical Payments to Others (Each Person)',
                '1',
                'POL',
                '',
              ),
              HomeownerCoverage(
                'COV_LOSSOFUSE',
                '',
                '58200.0',
                'Loss of Use Coverage',
                '1',
                'DWL',
                '',
              ),
              HomeownerCoverage(
                'COV_IDENTITY_THEFT',
                '',
                '5000',
                'Identity Theft Coverage',
                '1',
                'POL',
                '',
              ),
            ],
            [
              HomeownerDeductible(
                '5820',
                'DED1_G',
                'Deductible For Windstorm, Hurricane or Hail',
                '1',
                'DWL',
              ),
              HomeownerDeductible(
                '5820',
                'DED2_G',
                'Deductible For All Other Perils',
                '1',
                'DWL',
              ),
            ],
            [
              HomeownerDiscount(
                'Claims Free',
                '-334',
              ),
              HomeownerDiscount(
                'Companion Policy',
                '-295',
              ),
            ],
            [],
            [],
          ),
          HomeownerSection(
            'Mortgagees',
            [],
            [],
            [],
            [],
            [
              Mortgagee(
                'PO BOX 100515, FLORENCE SC 29502',
                '',
                'WELLS FARGO BANK NA #936',
                '1',
                'DWL',
                'MTG',
              ),
            ],
          ),
        ],
        Address(
          'address1',
          'address2',
          'address3',
          'city',
          'state',
          'zipCode',
          'zipCode4',
          'zipCode2',
        ),
        policyType: 'HT',
        policySubType: 'policySubType',
        writingCompanyName: 'writingCompanyName',
        policyBilling: PolicyBilling(
          'billAccountNumber',
          'billedPremiumAmount',
          'billingPlan',
          'currentAmountDue',
          '2023/02/03',
          'eBillStatus',
          'pastDueAmount',
          [],
          'grossPremiumAmount',
          'totalDiscounts',
          'theftFee',
        ),
        policyNumber: policyNum,
        policyDescription: 'policyDescription',
        effectiveDate: '2023-06-15',
        expirationDate: '2023-12-31',
        namedInsuredOne: 'namedInsuredOne',
        namedInsuredTwo: 'namedInsuredTwo',
      );

  static AutoPolicyDetail createAutoPolicyDetail({
    String policyNum = 'Mock Policy Number',
    String currentAmountDue = '',
    String currentPaymentDueDate = '',
  }) =>
      AutoPolicyDetail(
        policyAddress: Address(
          '123 Mock Street',
          '',
          '',
          'MOCK CITY',
          'MC',
          '12345',
          '',
          '',
        ),
        policySymbol: 'Mock Policy Symbol',
        coveredDrivers: [
          Driver(
            '2000-01-31', // DOB
            '1234567890', // License
            '',
            '',
            'FULL NAME',
            '',
            '',
            '',
            '',
            '2000',
          ),
        ],
        excludedDrivers: [],
        vehicles: [
          Vehicle(
            '',
            '',
            [],
            [],
            [],
            [],
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
          ),
        ],
        policyType: PolicyType.txPersonalAuto.value,
        policySubType: 'Mock Policy SubType',
        writingCompanyName: 'Mock Writing Company Name',
        policyBilling: PolicyBilling(
          '',
          '',
          '',
          currentAmountDue,
          currentPaymentDueDate,
          '',
          '',
          [],
          'grossPremiumAmount',
          'totalDiscounts',
          'theftFee',
        ),
        policyNumber: policyNum,
        policyDescription: 'Mock Policy Description',
        isEnrolledPaperless: true,
        showIdCard: true,
        showRoadsideAssistanceCard: true,
        effectiveDate: '2023-01-01',
        expirationDate: '2023-12-31',
        namedInsuredOne: 'MOCK NAMED INSURED ONE',
        namedInsuredTwo: 'Mock Named Insured Two',
      );

  static AgAdvantagePolicyDetail createAgAdvantagePolicyDetail({
    String policyNum = 'policyNum',
    String propertyLocation = 'propertyLocation',
  }) =>
      AgAdvantagePolicyDetail(
        propertyLocation,
        'propertyConstruction',
        'policyForm',
        [
          AgAdvantageSection(
            [
              AgAdvantageCoverage(
                'COV_DWELLING',
                'Coverage A',
                '582000',
                'Dwelling',
                '1',
                'DWL',
                'AA',
                '17000',
              ),
              AgAdvantageCoverage(
                'COV_PERSONALLIABILITY',
                'Coverage C',
                '500000',
                'Personal Liability (Each Occurrence)',
                '1',
                'POL',
                'AA',
                '20000',
              ),
            ],
            [
              AgAdvantageDeductible(
                '5820',
                '295',
                'Deductible For Windstorm, Hurricane or Hail',
                '1',
                'DWL',
              ),
            ],
            [
              AgAdvantageDiscount(
                'Companion Policy',
                '295',
              ),
            ],
            [],
            [],
            'Section I Dwelling Coverage',
          ),
          AgAdvantageSection(
            [
              AgAdvantageCoverage(
                'COV_DWELLING',
                'Coverage A',
                '582000',
                'Dwelling',
                '1',
                'DWL',
                'AA',
                '17000',
              ),
              AgAdvantageCoverage(
                'COV',
                '',
                '500000',
                'Recreational Land Use Liability - Bodily Injury',
                '1',
                'POL',
                'AA',
                '20000',
              ),
            ],
            [
              AgAdvantageDeductible(
                '5820',
                '295',
                'Deductible For Windstorm, Hurricane or Hail',
                '1',
                'DWL',
              ),
            ],
            [
              AgAdvantageDiscount(
                'Companion Policy',
                '295',
              ),
            ],
            [],
            [],
            'Section II Coverage',
          ),
        ],
        Address(
          'address1',
          'address2',
          'address3',
          'city',
          'state',
          'zipCode',
          'zipCode4',
          'zipCode2',
        ),
        policyType: 'HT',
        policySubType: 'policySubType',
        writingCompanyName: 'writingCompanyName',
        policyBilling: PolicyBilling(
          'billAccountNumber',
          'billedPremiumAmount',
          'billingPlan',
          'currentAmountDue',
          '2023/02/03',
          'eBillStatus',
          'pastDueAmount',
          [],
          '',
          '',
          '',
        ),
        policyNumber: policyNum,
        policyDescription: 'policyDescription',
        effectiveDate: '2023-06-15',
        expirationDate: '2023-12-31',
        namedInsuredOne: 'namedInsuredOne',
        namedInsuredTwo: 'namedInsuredTwo',
      );
}
